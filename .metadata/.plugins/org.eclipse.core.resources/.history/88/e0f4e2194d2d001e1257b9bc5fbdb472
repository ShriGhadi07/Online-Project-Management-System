package com.springRestAPI.springRestAPI.control;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.springRestAPI.springRestAPI.Login.Response;
import com.springRestAPI.springRestAPI.entities.data;
import com.springRestAPI.springRestAPI.entities.techprimelab;
import com.springRestAPI.springRestAPI.repository.TechPrimeLabRepository;
import com.springRestAPI.springRestAPI.service.TechPrimeLabService;

@RestController
@RequestMapping("/tech")
public class TechPrimeLabController {

	TechPrimeLabService techPrime;

	@Autowired
	public TechPrimeLabController(TechPrimeLabService techPrime) {
		super();
		this.techPrime = techPrime;
	}
	
	
	
	
    TechPrimeLabRepository techPrimeLabRepository;
	
	public TechPrimeLabController(TechPrimeLabRepository techPrimeLabRepository) {
		super();
		this.techPrimeLabRepository = techPrimeLabRepository;
	}
    public TechPrimeLabRepository getTechPrimeLabRepository() {
		return techPrimeLabRepository;
	}
	
    
    
	@PostMapping("/save")
	@CrossOrigin("*")
	public ResponseEntity<Response> saveEmployee(@RequestBody techprimelab tech){
		return new ResponseEntity<>(techPrime.saveProject(tech), HttpStatus.CREATED);
	}
	
	
	
	
	@GetMapping("/getAll")
	@CrossOrigin("*")
	public List<techprimelab>getAllProject(
			@RequestParam(value = "pageNumber",defaultValue = "0",required = false) Integer pageNumber,
			@RequestParam(value = "pageSize",defaultValue = "10",required = false) Integer pageSize,
			@RequestParam(value="sortBy",defaultValue = "pid",required = false) String sortBy
			){
		
		    return techPrime.getAllProject(pageNumber,pageSize,sortBy);
	}
	
//	@GetMapping("/getAll")
//	@CrossOrigin("*")
//	public List<techprimelab>getAllProject(){
//		
//		    return techPrime.getAllProject();
//	}
	
	
	 @GetMapping
	 public ResponseEntity<Page<techprimelab>> getBooks(@RequestParam(defaultValue = "0") int page,
	                                               @RequestParam(defaultValue = "10") int size,
	                                               @RequestParam(defaultValue = "id,asc") String[] sort) {
	        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.fromString(sort[1]), sort[0]));
	        Page<techprimelab> bookPage = techPrimeLabRepository.findAll(pageable);
	        return ResponseEntity.ok(bookPage);
	    }
	
	
//	@PutMapping("/update/{pid}/{status}")
//	@CrossOrigin("*")
//	public ResponseEntity<techprimelab> updateProject(@PathVariable("pid")int pid,@PathVariable("status")String status,
//			@RequestBody techprimelab tech){
//		return new ResponseEntity<techprimelab>(techPrime.updateProject(pid,status), HttpStatus.OK);
//	}
	
	@PutMapping("/update")
	@CrossOrigin("*")
	public ResponseEntity<Response> updateProject(@RequestBody data da){
		
		int pid = da.getPid();
		String status = da.getStatus();
		
		return new ResponseEntity<Response>(techPrime.updateProject(pid,status), HttpStatus.OK);
	}
	
	 
	@GetMapping("/search/{keywords}")
	@CrossOrigin("*")
	public List<techprimelab> getProjectName(@PathVariable("keywords")String keywords){
		
		return techPrime.searchByPName(keywords);
		
	}
	
	@GetMapping("/api/search")
    public List<techprimelab> search(@RequestParam String query) {
        return techPrimeLabRepository.findByNameContainingIgnoreCase(query);
        // You can add additional methods in the repository to handle searches in other columns
    }

	
	
}
